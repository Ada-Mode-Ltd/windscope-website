{% assign id = content | setId %}

<div class="quote-holder" id="{{ id }}" role="region" aria-label="quotes" tabindex="0">
    <ul>
        {% for quote in quotes %}
        {% assign quoteIndex = forloop.index0 %}
        {%- if quoteIndex == 0 -%}
        {%- assign current = true -%}
    {%- else -%}
        {%- assign current = false -%}
    {%- endif -%}
        {% include 'components/quote.liquid' %}
        {% endfor %}
    </ul>
</div>

{% if quotes.size > 1 %}
<nav class=" quote-nav">
    <button class="button-lg" aria-label="previous" disabled><svg viewBox="0 0 448 512" width="100" title="arrow-left" focusable="false" aria-hidden>
  <path d="M257.5 445.1l-22.2 22.2c-9.4 9.4-24.6 9.4-33.9 0L7 273c-9.4-9.4-9.4-24.6 0-33.9L201.4 44.7c9.4-9.4 24.6-9.4 33.9 0l22.2 22.2c9.5 9.5 9.3 25-.4 34.3L136.6 216H424c13.3 0 24 10.7 24 24v32c0 13.3-10.7 24-24 24H136.6l120.5 114.8c9.8 9.3 10 24.8.4 34.3z" />
</svg></button>
<ol>
    {% for quote in quotes %}
    {% assign quoteIndex = forloop.index0 %}
    {%- if quoteIndex == 0 -%}
        {%- assign current = true -%}
    {%- else -%}
        {%- assign current = false -%}
    {%- endif -%}
    <li>
			<button aria-label="{{ quoteIndex }}" aria-current="{{ current }}" data-quote="{{ quoteIndex }}"></button>
		</li>
    {% endfor %}
</ol>
    <button class="button-lg" aria-label="next"><svg viewBox="0 0 448 512" width="100" title="arrow-right" focusable="false" aria-hidden>
  <path d="M190.5 66.9l22.2-22.2c9.4-9.4 24.6-9.4 33.9 0L441 239c9.4 9.4 9.4 24.6 0 33.9L246.6 467.3c-9.4 9.4-24.6 9.4-33.9 0l-22.2-22.2c-9.5-9.5-9.3-25 .4-34.3L311.4 296H24c-13.3 0-24-10.7-24-24v-32c0-13.3 10.7-24 24-24h287.4L190.9 101.2c-9.8-9.3-10-24.8-.4-34.3z" />
</svg></button>
</nav>

<script>
    const quoteHolder = document.getElementById('{{ id }}');
    const scrollableSection = quoteHolder.querySelector('ul');
    const quotes = quoteHolder.querySelectorAll('li.quote');
    const totalQuotes = quotes.length;
    const quoteNav = document.querySelector('.quote-nav');
    const quoteNavItems = [...quoteNav.querySelectorAll('li button')];
    const quoteBigButton = [...quoteNav.querySelectorAll('.button-lg')];

    function a11yClick(event) {
        if (event.type === 'click') {
            return true;
        } else if (event.type === 'keypress') {
            var code = event.charCode || event.keyCode;
            if ((code === 32) || (code === 13)) {
                return true;
            }
        } else {
            return false;
        }
    }

    // Set initial quote
    let currentQuote = 0;
    quotes[currentQuote].setAttribute('data-active', '');
    quoteNavItems[currentQuote].setAttribute('data-active', '');
            const prevButton = quoteBigButton[0]
	const nextButton = quoteBigButton[1]

    let activeQuote = parseInt(quoteHolder.querySelector('li.quote[data-active]').dataset.quote);
    console.log({
        activeQuote
    });

    quoteNavItems.forEach(item => {
        const quoteIndex = parseInt(item.dataset.quote);
        item.addEventListener('click', (e) => {
            if (a11yClick(e)) {
                e.preventDefault();
                changeQuote(quoteIndex);
            }
        });

        item.addEventListener('keypress', (e) => {
            if (a11yClick(e)) {
                e.preventDefault();
                changeQuote(quoteIndex);
            }
        });
    })

    quoteHolder.addEventListener('keydown', (e) => {
        // Change quote on left/right arrow key press
        if (e.keyCode === 37) {
            e.preventDefault();
            changeQuote(activeQuote - 1);
        } else if (e.keyCode === 39) {
            e.preventDefault();
            changeQuote(activeQuote + 1);
        }
    })

    prevButton.addEventListener('click', (e) => {
        if (a11yClick(e)) {
            e.preventDefault();
            changeQuote(activeQuote - 1);
        }
    })

    nextButton.addEventListener('click', (e) => {
        if (a11yClick(e)) {
            e.preventDefault();
            changeQuote(activeQuote + 1);
        }
    })

    prevButton.addEventListener('keypress', (e) => {
        if (a11yClick(e)) {
            e.preventDefault();
            changeQuote(activeQuote - 1);
        }
    })

    nextButton.addEventListener('keypress', (e) => {
        if (a11yClick(e)) {
            e.preventDefault();
            changeQuote(activeQuote + 1);
        }
    })

    function changeQuote(index) {

	
	if (index === 0) {
		prevButton.disabled = true
	} else if (prevButton.disabled) {
		prevButton.disabled = false
	}
	
	if (index === quoteNavItems.length - 1) {
		nextButton.disabled = true
	} else if (nextButton.disabled) {
		nextButton.disabled = false
	}

        scrollableSection.scrollTo({
            top: 0,
            left: scrollableSection.scrollWidth / totalQuotes * index,
            behavior: 'smooth'
        });

        console.log(scrollableSection.offsetLeft)

        quoteNavItems.forEach(nav => {
            nav.removeAttribute('data-active');
            nav.removeAttribute('aria-current');
        });

        quotes.forEach(quote => {
            quote.removeAttribute('aria-current');
            quote.removeAttribute('data-active');
        });

        quoteNavItems[index].setAttribute('aria-current', 'true');
        quoteNavItems[index].setAttribute('data-active', 'true');
        quotes[index].setAttribute('aria-current', 'true');
        quotes[index].setAttribute('data-active', 'true ');

        if (index === 0) {
            activeQuote = 0;
        } else if (index === totalQuotes - 1) {
            activeQuote = totalQuotes - 1;
        } else {
            activeQuote = parseInt(index);
        }
    }
</script>
{% endif %}