<h2 class="text-center">{{ sectionTitle }}</h2>

<div class="stacked-tabs" data-tabs="{{ tabs.size }}">
    <ul role="tablist" class="flow">
        {% for tab in tabs %}
        <li role="presentation" data-tab="{{ forloop.index0 }}" {% if forloop.first == true %} data-active
            aria-selected="true" {% endif %}>
            <div role="tab" tabindex="0" class="text">
                <p class="h5">{{ tab.title }}</p>
                <p>{{ tab.text }}</p>
            </div>
            <div class="image--mobile" data-tab="{{ forloop.index0 }}" {% if forloop.first == true %} data-active
                {% endif %}>
                <!-- <img src="{{ tab.image }}" alt=""> -->
                {% capture imgUrl %}
                {% sanityImageUrl tab.image%}
                {% endcapture %}

                {% image imgUrl, tab.image.altText %}
            </div>
        </li>
        {% endfor %}
        {% if sectionLink %}
            {%- assign slug = sectionLink.url -%}
            {% if sectionLink.linkType == 'internal' %}
            {%- if sectionLink.text -%}
                {% assign text = sectionLink.text %}
            {% else %}
                {% assign text = sectionLink.internalLink.title %}
            {%- endif -%}
            {%- assign slug = '/' | append: sectionLink.internalLink.slug -%}
            {% endif %}
        <li><a class="section-link text-link primary" href="{{ slug }}">{{ text }}</a></li>
        {% endif %}
    </ul>
    {% for tab in tabs %}
    <div class="image" data-tab="{{ forloop.index0 }}" {% if forloop.first == true %} data-active {% endif %}>
        <!-- <img src="{{ tab.image }}" alt=""> -->
        {% capture imgUrl %}
        {% sanityImageUrl tab.image%}
        {% endcapture %}

        {% image imgUrl, tab.image.altText %}
    </div>
    {% endfor %}
</div>


<script>
    const stack = document.querySelector('.stacked-tabs');
    const tabs = stack.querySelectorAll('li[data-tab]');
    const totalTabs = parseInt(stack.dataset.tabs);
    const images = stack.querySelectorAll('.image[data-tab]');

    // Detect window width
    let windowWidth = window.innerWidth;
    // check if window width is less than 768px
    function isMobile() {
        return windowWidth < 1024 ? true : false;
    }

    // Check if window is mobile on resize
    window.addEventListener('resize', function () {
        windowWidth = window.innerWidth;
        if (isMobile()) {
            // add mobile class to stacked-tabs
            document.querySelector('.stacked-tabs').classList.add('stacked-tabs--mobile');
        } else {
            // remove mobile class from stacked-tabs
            document.querySelector('.stacked-tabs').classList.remove('stacked-tabs--mobile');
            tabListener();
        }
    })


    if (isMobile()) {
        // add mobile class to stacked-tabs
        document.querySelector('.stacked-tabs').classList.add('stacked-tabs--mobile');
    } else {
        // remove mobile class from stacked-tabs
        document.querySelector('.stacked-tabs').classList.remove('stacked-tabs--mobile');
        tabListener();
    }


    function a11yClick(event) {
        if (event.type === 'click') {
            return true;
        } else if (event.type === 'keypress') {
            var code = event.charCode || event.keyCode;
            if ((code === 32) || (code === 13)) {
                return true;
            }
        } else {
            return false;
        }
    }

    // Loop through the tabs changing the active tab every 5000ms, or when a tab is clicked
    let activeTab = parseInt(stack.querySelector('li[data-active]').dataset.tab);
    let intervalID = setInterval(() => {
        if (!isMobile()) {
            if (activeTab < totalTabs - 1) {
                activeTab++;
            } else {
                activeTab = 0;
            }
            changeTab(activeTab);
        }
    }, 5000);

    function tabListener() {
        tabs.forEach(tab => {
            tab.setAttribute('data-loop', '')
            tab.addEventListener('click', () => {
                clearInterval(intervalID);
                changeTab(tab.dataset.tab);
                intervalID = setInterval(() => {
                    if (activeTab < totalTabs - 1) {
                        activeTab++;
                    } else {
                        activeTab = 0;
                    }
                    changeTab(activeTab);
                }, 5000);
            });

            tab.addEventListener('keypress', (e) => {
                if (a11yClick(e)) {
                    e.preventDefault();
                    clearInterval(intervalID);
                    changeTab(tab.dataset.tab);
                    intervalID = setInterval(() => {
                        if (activeTab < totalTabs - 1) {
                            activeTab++;
                        } else {
                            activeTab = 0;
                        }
                        changeTab(activeTab);
                    }, 5000);
                }
            });
        });
    }


    function changeTab(tab) {
        tabs.forEach(tab => {
            tab.removeAttribute('data-active');
            tab.removeAttribute('aria-selected');
        });
        images.forEach(image => {
            image.removeAttribute('data-active');
        });
        tabs[tab].setAttribute('data-active', '');
        tabs[tab].setAttribute('aria-selected', 'true');
        images[tab].setAttribute('data-active', '');
        activeTab = parseInt(tab);
    }
</script>